{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\Start.svelte",
    "..\\..\\MainMenu.svelte",
    "..\\..\\Game.svelte",
    "..\\..\\Modal.svelte",
    "..\\..\\Commands.svelte",
    "..\\..\\Help.svelte",
    "..\\..\\Location.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import MainMenu from \"./MainMenu.svelte\";\r\n  import Game from \"./Game.svelte\";\r\n\r\n  let playing = false;\r\n  let loadGame = false;\r\n\r\n  const newGame = () => {\r\n    loadGame = false;\r\n    playing = true;\r\n  };\r\n\r\n  const continueGame = () => {\r\n    loadGame = true;\r\n    playing = true;\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .menu-holder {\r\n    text-align: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    overflow: auto;\r\n  }\r\n</style>\r\n\r\n<bg />\r\n{#if !playing}\r\n  <main>\r\n    <div class=\"menu-holder\">\r\n      <MainMenu on:newGame={newGame} on:continueGame={continueGame} />\r\n    </div>\r\n  </main>\r\n{:else}\r\n  <Game {loadGame} />\r\n{/if}\r\n",
    "<script>\r\n  import { onMount } from \"svelte\";\r\n  import { createEventDispatcher } from \"svelte\";\r\n  import Modal from \"./Modal.svelte\";\r\n\r\n  const dispatch = createEventDispatcher();\r\n  let hasSavedGame = false;\r\n  $: continueDisabled = !hasSavedGame;\r\n  let exportString = \"\";\r\n  let exportTextbox = null;\r\n\r\n  onMount(() => {\r\n    if (localStorage.getItem(\"game_state\")) {\r\n      hasSavedGame = true;\r\n    }\r\n  });\r\n\r\n  const startImport = () => {\r\n    if (hasSavedGame) {\r\n      if (\r\n        !confirm(\r\n          \"Importing a game will erase your current saved game. Continue?\"\r\n        )\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    var gameStr = prompt(\"Paste your save code here and press OK.\", \"\");\r\n\r\n    if (!gameStr) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let json = atob(gameStr);\r\n      let gameState = JSON.parse(json);\r\n      localStorage.setItem(\"game_state\", json);\r\n      dispatch(\"continueGame\");\r\n    } catch {\r\n      alert(\"Your save code is invalid.\");\r\n    }\r\n  };\r\n\r\n  const startExport = () => {\r\n    exportString = btoa(localStorage.getItem(\"game_state\"));\r\n  };\r\n\r\n  const copyExport = () => {\r\n    exportTextbox.select();\r\n    try {\r\n      document.execCommand(\"copy\");\r\n      alert(\"Copied to clipboard. Paste it somewhere safe!\");\r\n    } catch {\r\n      alert(\r\n        \"FAiled to copy to clipboard. Select everything in the textbox manually and press CTRL+C instead.\"\r\n      );\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n  button {\r\n    width: 15em;\r\n  }\r\n  .continueDisabled {\r\n    background-color: #666;\r\n    color: #999;\r\n    border-style: solid;\r\n    border-color: #666;\r\n  }\r\n  .export-text {\r\n    font-size: 0.5em;\r\n    min-height: 15em;\r\n  }\r\n  .copy {\r\n    text-decoration: underline;\r\n    color: #0000ee;\r\n    cursor: pointer;\r\n    display: block;\r\n    margin-top: 0.5em;\r\n  }\r\n  .copy > span {\r\n    font-size: 0.875em;\r\n    margin-right: 0.125em;\r\n    position: relative;\r\n    top: -0.25em;\r\n    left: -0.125em;\r\n  }\r\n  .copy > span > span {\r\n    position: absolute;\r\n    top: 0.25em;\r\n    left: 0.25em;\r\n  }\r\n</style>\r\n\r\n<h1>Adventure</h1>\r\n<p>A world of mystery and adventure awaits!</p>\r\n<button on:click={() => dispatch('newGame')}>New Game</button>\r\n<button\r\n  class:continueDisabled\r\n  disabled={continueDisabled}\r\n  on:click={() => dispatch('continueGame')}>\r\n  Continue Saved Game\r\n</button>\r\n<p>\r\n  If you want to move your saved game onto a different browser, you can export\r\n  it to text and then import it in a different browser.\r\n</p>\r\n<button on:click={startImport}>Import Saved Game ‚Üê</button>\r\n{#if hasSavedGame}\r\n  <button on:click={startExport}>Export Saved Game ‚Üí</button>\r\n{/if}\r\n<p>\r\n  Download and print a few\r\n  <a href={window.hostDir + '/adventure-blank-map.pdf'} target=\"_blank\">\r\n    blank maps\r\n  </a>\r\n  and fill them in as you play the game!<br />(Make sure to find the in-game compass first!)\r\n</p>\r\n<p>\r\n    Did you like the game? Hate it? Or did you find a bug or a typo? I'd love\r\n    to hear about it! Go check out the\r\n    <a href=\"https://github.com/jschnurer/text-adv-svelte#readme\">readme at github</a>\r\n    for my contact info!\r\n  </p>\r\n{#if exportString}\r\n  <Modal showClose={true} on:close={() => (exportString = '')}>\r\n    <p>\r\n      Copy this save code and put it somewhere safe. Then, on another computer,\r\n      you can import this save by clicking Import Saved Game and pasting this\r\n      code in.\r\n    </p>\r\n    <textarea\r\n      value={exportString}\r\n      readonly=\"readonly\"\r\n      class=\"export-text\"\r\n      bind:this={exportTextbox} />\r\n    <span class=\"copy\" on:click={copyExport}>\r\n      <span>\r\n        üìÑ\r\n        <span>üìÑ</span>\r\n      </span>\r\n      Copy to clipboard\r\n    </span>\r\n  </Modal>\r\n{/if}\r\n",
    "<script>\r\n  import { onMount } from \"svelte\";\r\n  import config from \"./config.json\";\r\n  import Help from \"./Help.svelte\";\r\n  import getGameState from \"./Helpers/getGameState.js\";\r\n  import Commands from \"./Commands.svelte\";\r\n  import Location from \"./Location.svelte\";\r\n\r\n  function getRoomExits(gameState) {\r\n    if (!gameState\r\n    || !gameState.room) {\r\n      return [];\r\n    }\r\n\r\n    let room = gameState.room;\r\n    let exits = [];\r\n\r\n    exits.push(room.north && (!room.northFlag || gameState.getFlag(room.northFlag)) ? \"north\" : undefined);\r\n    exits.push(room.south && (!room.southFlag || gameState.getFlag(room.southFlag)) ? \"south\" : undefined);\r\n    exits.push(room.east && (!room.eastFlag || gameState.getFlag(room.eastFlag)) ? \"east\" : undefined);\r\n    exits.push(room.west && (!room.westFlag || gameState.getFlag(room.westFlag)) ? \"west\" : undefined);\r\n    exits.push(room.up && (!room.upFlag || gameState.getFlag(room.upFlag)) ? \"up\" : undefined);\r\n    exits.push(room.down && (!room.downFlag || gameState.getFlag(room.downFlag)) ? \"down\" : undefined);\r\n\r\n    return exits.filter(x => x);\r\n  }\r\n\r\n  export let loadGame = false;\r\n\r\n  let gs;\r\n  let previousInputs = [];\r\n  let cmdIx = -1;\r\n  let output = null;\r\n  $: gameState = gs;\r\n  $: hasCompass = gameState\r\n    ? gameState.inventory.some(x => x.id === \"COMPASS\")\r\n    : false;\r\n  $: knowsAnyIncantations = gameState\r\n    ? gameState.knowsAnyIncantations()\r\n    : false;\r\n  $: coords = gameState && gameState.room && gameState.room.coords ? gameState.room.coords : \"\";\r\n  $: exits = getRoomExits(gameState);\r\n  $: isDark = gameState && gameState.room ? gameState.room.dark : false;\r\n  $: isLightOn = gameState && gameState.getFlag(\"G.HASLIGHT\");\r\n\r\n  let helpVisible = false;\r\n\r\n  let entry = \"\";\r\n\r\n  onMount(async () => {\r\n    gs = getGameState(\r\n      loadGame,\r\n      () =>\r\n        window.setTimeout(\r\n          () => (output.scrollTop = output.scrollHeight + output.offsetTop),\r\n          1\r\n        ),\r\n      function() {\r\n        gameState = gameState;\r\n      }\r\n    );\r\n\r\n    if (!loadGame) {\r\n      await gs.loadRoom(config.initial_room);\r\n    }\r\n  });\r\n\r\n  const focus = el => {\r\n    el.focus();\r\n  };\r\n\r\n  const keydown = ({ keyCode }) => {\r\n    if (keyCode === 38) {\r\n      loadPrevInput(-1);\r\n    } else if (keyCode === 40) {\r\n      loadPrevInput(1);\r\n    }\r\n  };\r\n\r\n  const loadPrevInput = dir => {\r\n    if (!previousInputs.length) {\r\n      return;\r\n    }\r\n\r\n    if (dir === -1) {\r\n      if (cmdIx === -1) {\r\n        cmdIx = previousInputs.length - 1;\r\n      } else if (cmdIx > 0) {\r\n        cmdIx--;\r\n      } else {\r\n        return;\r\n      }\r\n    } else {\r\n      if (cmdIx === -1) {\r\n        entry = \"\";\r\n        return;\r\n      } else {\r\n        cmdIx++;\r\n      }\r\n    }\r\n\r\n    if (cmdIx > previousInputs.length - 1) {\r\n      cmdIx = -1;\r\n      entry = \"\";\r\n      return;\r\n    }\r\n\r\n    entry = previousInputs[cmdIx];\r\n  };\r\n\r\n  const submit = () => {\r\n    let ent = entry.trim();\r\n    if (!ent.startsWith(\"dev|\")) {\r\n      ent = ent.toLowerCase();\r\n    }\r\n    submitUserEntry(ent);\r\n  };\r\n\r\n  const submitUserEntry = ent => {\r\n    gameState.handleUserEntry(ent);\r\n    previousInputs = [...previousInputs, ent];\r\n    if (previousInputs.length > 10) {\r\n      previousInputs = previousInputs.slice(1);\r\n    }\r\n    entry = \"\";\r\n    cmdIx = -1;\r\n  };\r\n\r\n  const help = () => {\r\n    helpVisible = true;\r\n  };\r\n\r\n  var tagBody = \"(?:[^\\\"'>]|\\\"[^\\\"]*\\\"|'[^']*')*\";\r\n\r\n  var tagOrComment = new RegExp(\r\n    \"<(?:\" +\r\n      // Comment body.\r\n      \"!--(?:(?:-*[^->])*--+|-?)\" +\r\n      // Special \"raw text\" elements whose content should be elided.\r\n      \"|script\\\\b\" +\r\n      tagBody +\r\n      \">[\\\\s\\\\S]*?</script\\\\s*\" +\r\n      \"|style\\\\b\" +\r\n      tagBody +\r\n      \">[\\\\s\\\\S]*?</style\\\\s*\" +\r\n      // Regular name\r\n      \"|/?[a-z]\" +\r\n      tagBody +\r\n      \")>\",\r\n    \"gi\"\r\n  );\r\n  const sanitize = text => {\r\n    var oldHtml;\r\n    do {\r\n      oldHtml = text;\r\n      text = text.replace(tagOrComment, \"\");\r\n    } while (text !== oldHtml);\r\n    return text.replace(/</g, \"&lt;\");\r\n  };\r\n\r\n  const convertSyntax = text => {\r\n    let nt = text\r\n      .replace(/\\^(.+?)\\^/g, \"<h3>$1</h3>\")\r\n      .replace(/~(.+?)~/g, \"<entry>$1</entry>\")\r\n      .replace(/#(.+?)#/g, \"<pre>$1</pre>\")\r\n      .replace(/\\\\/g, \"<br />\")\r\n      .replace(/\"(.+?)\"/g, '<speech>\"$1\"</speech>')\r\n      .replace(/^\\+(.+?)\\+$/, \"<waitForInput>$1</waitForInput>\")\r\n      .replace(/%(.+?)%/g, `<hint>$1</hint>`);\r\n\r\n    if (nt.startsWith(\"]\")) {\r\n      return nt.replace(/^]+/, \"\");\r\n    } else {\r\n      return nt;\r\n    }\r\n  };\r\n\r\n  const getClass = line => {\r\n    if (line.startsWith(\"]]\")) {\r\n      return \"indent2\";\r\n    } else if (line.startsWith(\"]\")) {\r\n      return \"indent\";\r\n    }\r\n\r\n    return \"\";\r\n  };\r\n\r\n  const hintize = line => {\r\n    if (line.indexOf(\"<hint>\") === -1) {\r\n      return [{ type: \"html\", value: line }];\r\n    }\r\n\r\n    let chunks = [];\r\n    let matches = line.match(/<hint>(.+?)<\\/hint>/gi);\r\n\r\n    let tempLine = line;\r\n\r\n    matches.forEach(x => {\r\n      let ix = tempLine.indexOf(x);\r\n\r\n      if (ix > 0) {\r\n        chunks.push({ type: \"html\", value: tempLine.substr(0, ix) });\r\n        tempLine = tempLine.substr(ix);\r\n      }\r\n\r\n      const hintMatch = x.match(/<hint>(.+?)<\\/hint>/);\r\n\r\n      chunks.push({ type: \"hint\", value: hintMatch[1] });\r\n      tempLine = tempLine.substr(hintMatch[0].length);\r\n    });\r\n\r\n    if (tempLine.length) {\r\n      chunks.push({ type: \"html\", value: tempLine });\r\n    }\r\n\r\n    return chunks;\r\n  };\r\n\r\n  const clickHint = item => {\r\n    submitUserEntry(\"look \" + item.target.innerText);\r\n  };\r\n</script>\r\n\r\n<style>\r\n  form {\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 0.5em;\r\n    align-items: center;\r\n    flex: none;\r\n  }\r\n\r\n  form > input {\r\n    flex: auto;\r\n    width: 10px;\r\n  }\r\n\r\n  form > span {\r\n    background-color: transparent;\r\n    color: white;\r\n    border: 1px white solid;\r\n    border-radius: 2em;\r\n    vertical-align: middle;\r\n    height: 1.5em;\r\n    text-align: center;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    padding: 0 0.2em;\r\n  }\r\n\r\n  button {\r\n    margin-top: 1.5em;\r\n  }\r\n\r\n  .indent {\r\n    margin-left: 2em;\r\n  }\r\n\r\n  .indent2 {\r\n    margin-left: 4em;\r\n  }\r\n\r\n  :global(entry) {\r\n    color: #666;\r\n  }\r\n\r\n  :global(entry)::before {\r\n    content: \"> \";\r\n  }\r\n\r\n  .side-menu {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1em;\r\n  }\r\n</style>\r\n\r\n<main>\r\n  {#if helpVisible}\r\n    <Help\r\n      showHints={gameState.options.showHints}\r\n      on:toggleHints={() => (gameState.options.showHints = !gameState.options.showHints)} />\r\n    <button on:click={() => (helpVisible = false)}>Ok, ok. Let me play!</button>\r\n  {:else if gameState}\r\n    <room bind:this={output}>\r\n      {#if gameState.isGameOver}\r\n        <h3>GAME OVER</h3>\r\n      {:else if gameState.isEnd}\r\n        <h3>The End</h3>\r\n      {/if}\r\n\r\n      {#each gameState.text.split('\\n').filter(x => !!x) as line}\r\n        <p class={getClass(line)}>\r\n          {#if line.indexOf('^') === 0}\r\n            {@html convertSyntax(line)}\r\n          {:else}\r\n            {#each hintize(convertSyntax(sanitize(line))) as chunk}\r\n              {#if chunk.type === 'html'}\r\n                {@html chunk.value}\r\n              {:else}\r\n                <hint on:click={clickHint}>{chunk.value}</hint>\r\n              {/if}\r\n            {/each}\r\n          {/if}\r\n        </p>\r\n      {/each}\r\n    </room>\r\n    {#if gameState.isGameOver}\r\n      <button on:click={() => location.reload()}>Try again</button>\r\n    {:else if gameState.isEnd}\r\n      <button on:click={() => location.reload()}>New Game</button>\r\n    {:else}\r\n      <form on:submit|preventDefault={submit} id=\"inputForm\">\r\n        <input\r\n          use:focus\r\n          bind:value={entry}\r\n          on:keydown={keydown}\r\n          id=\"userInput\" />\r\n        <span on:click={help}>‚ùî</span>\r\n      </form>\r\n    {/if}\r\n  {/if}\r\n</main>\r\n<div class=\"side-menu\">\r\n  <Commands showIncantations={knowsAnyIncantations} />\r\n  <Location coords={coords} hasCompass={hasCompass} exits={exits} isDark={isDark} isLightOn={isLightOn} />\r\n</div>\r\n",
    "<script>\r\n  import { createEventDispatcher } from \"svelte\";\r\n  import { fade, fly } from \"svelte/transition\";\r\n\r\n  export let width;\r\n  export let height;\r\n  export let showClose = false;\r\n\r\n  const dispatch = createEventDispatcher();\r\n  let windowWidth = 0;\r\n\r\n  $: widthStyle = width ? `width: ${width};` : \"\";\r\n  $: heightStyle = height ? `height: ${height};` : \"\";\r\n  $: modalStyle = widthStyle + heightStyle;\r\n\r\n  const getTransition = () => {\r\n    if (windowWidth > 500) {\r\n      return { y: 25, duration: 300 };\r\n    } else {\r\n      return { y: 0, duration: 300 };\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n  fade {\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    background: black;\r\n    opacity: 0.85;\r\n    z-index: 1000;\r\n  }\r\n  modal {\r\n    background-color: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow-y: auto;\r\n    z-index: 1000;\r\n    background-color: #fff;\r\n    padding: 1em;\r\n    position: fixed;\r\n    border: 1px solid #eee;\r\n    border-radius: 5px;\r\n    overflow: auto;\r\n    top: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n    bottom: 0px;\r\n    -webkit-box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),\r\n      0 6px 20px 0 rgba(0, 0, 0, 0.19);\r\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -ms-flex-direction: column;\r\n    flex-direction: column;\r\n    color: #222;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n  }\r\n  @media (min-width: 500px) {\r\n    modal {\r\n      max-height: calc(100% - 40px);\r\n      min-width: 500px;\r\n      width: auto;\r\n      left: 50%;\r\n      top: 50%;\r\n      right: initial;\r\n      bottom: initial;\r\n      -webkit-transform: perspective(1px) translateY(-50%) translateX(-50%);\r\n      transform: perspective(1px) translateY(-50%) translateX(-50%);\r\n    }\r\n  }\r\n\r\n  span {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0.2em;\r\n    font-variant: small-caps;\r\n    color: black;\r\n    cursor: pointer;\r\n    padding: 0.5em;\r\n    z-index: 1;\r\n  }\r\n\r\n  span:hover {\r\n    background-color: rgb(244, 0, 0, 0.2);\r\n  }\r\n\r\n  .showClose {\r\n    padding-top: 1.5em;\r\n  }\r\n</style>\r\n\r\n<svelte:window bind:innerWidth={windowWidth} />\r\n\r\n<fade transition:fade={{ duration: 200 }} />\r\n<modal class:showClose style={modalStyle} transition:fly={getTransition()}>\r\n  {#if showClose}\r\n    <span on:click={() => dispatch('close')}>x</span>\r\n  {/if}\r\n  <slot />\r\n</modal>",
    "<script>\r\n  export let showIncantations = false;\r\n</script>\r\n\r\n<style>\r\n  .commands {\r\n    z-index: 1;\r\n    position: relative;\r\n    box-shadow: 0 0 10em #222;\r\n    background-color: #222;\r\n    padding: 1em;\r\n    flex: none;\r\n    overflow: auto;\r\n    align-self: flex-start;\r\n    font-size: .85em;\r\n    width: 270px;\r\n  }\r\n\r\n  h4 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  ul {\r\n    margin: 0;\r\n    list-style: none;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  li {\r\n    flex-basis: 50%;\r\n  }\r\n\r\n  .shortcut {\r\n    color: white;\r\n    white-space: nowrap;\r\n  }\r\n</style>\r\n\r\n<div class=\"commands\">\r\n  <h4>Common Commands</h4>\r\n  <ul>\r\n    <li title=\"Looks all around you.\"><span class=\"shortcut\">l</span>ook</li>\r\n    <li title=\"Looks at a specific object or person.\"><span class=\"shortcut\">l</span>ook [target]</li>\r\n    <li title=\"Takes an object and adds it to your inventory.\"><span class=\"shortcut\">t</span>ake [target]</li>\r\n    <li title=\"Lists the items in your inventory.\"><span class=\"shortcut\">i</span>nventory</li>\r\n    <li title=\"Travel north.\"><span class=\"shortcut\">n</span>orth</li>\r\n    <li title=\"Travel south.\"><span class=\"shortcut\">s</span>outh</li>\r\n    <li title=\"Travel east.\"><span class=\"shortcut\">e</span>ast</li>\r\n    <li title=\"Travel west.\"><span class=\"shortcut\">w</span>est</li>\r\n    <li title=\"Travel upward.\"><span class=\"shortcut\">u</span>p</li>\r\n    <li title=\"Travel downward.\"><span class=\"shortcut\">d</span>own</li>\r\n    <li title=\"Enters a building.\"><span class=\"shortcut\">enter</span> [target]</li>\r\n    <li title=\"Clears the game window of all text.\"><span class=\"shortcut\">cl</span>ear</li>\r\n    <li title=\"Moves the target out of the way.\"><span class=\"shortcut\">move</span> [target]</li>\r\n    <li title=\"Uses the specified object.\"><span class=\"shortcut\">use</span> [target]</li>\r\n    <li title=\"Opens the specified object.\"><span class=\"shortcut\">open</span> [target]</li>\r\n    <li title=\"Closes the specified object.\"><span class=\"shortcut\">close</span> [target]</li>\r\n    <li title=\"Greets a person and starts a conversation.\"><span class=\"shortcut\">greet</span> [person]</li>\r\n    <li title=\"Gives the specified object to the specified person.\"><span class=\"shortcut\">give</span> [object] to [person]</li>\r\n    {#if showIncantations}\r\n    <li title=\"Incants an incantation.\"><span class=\"shortcut\">incant</span> [incantation]</li>\r\n    <li title=\"Lists the incantations known to you.\"><span class=\"shortcut\">incantations</span></li>\r\n    {/if}\r\n    <li title=\"Uses a specific object on the target.\"><span class=\"shortcut\">use [object] on [target]</span></li>\r\n    <li title=\"Asks a person about a specific topic.\"><span class=\"shortcut\">ask [person] about [topic]</span></li>\r\n  </ul>\r\n</div>\r\n",
    "<script>\r\n  import { createEventDispatcher } from \"svelte\";\r\n  const dispatch = createEventDispatcher();\r\n\r\n  export let allowTogglingHints = false;\r\n  export let showHints = false;\r\n  $: onOrOff = showHints ? \"on\" : \"off\";\r\n  $: opposite = showHints ? \"off\" : \"on\";\r\n</script>\r\n\r\n<h3>Help</h3>\r\n<room>\r\n  <h4>Feedback</h4>\r\n  <p>\r\n    Did you like the game? Hate it? Or did you find a bug or a typo? I'd love\r\n    to hear about it! Go check out the\r\n    <a href=\"https://github.com/jschnurer/text-adv-svelte#readme\">readme at github</a>\r\n    for my contact info!\r\n  </p>\r\n  <h4>Playing the Game</h4>\r\n  <p>Control the game and interact with the world by typing commands.</p>\r\n  <p>\r\n    You play Adventure by typing commands into the textbox and pressing Enter.\r\n    Many commands have a shorthand so you don't have to type the entire word.\r\n    For example, \"look\" is a command you should use A LOT. Instead of typing\r\n    \"look\" all the time, you can just enter \"l\". Whenever a command is mentioned\r\n    below, its shortcut (if there is one) is written after it in parentheses.\r\n  </p>\r\n  <p>\r\n    You can do things like \"look\" (l) or \"take\" (t) (and many other things too!)\r\n    When you want to interact with something specific, type it after your\r\n    command. The commands should be very simple. For example, instead of saying\r\n    \"look at the tree\" you would say \"look tree\". Generally, anything you type\r\n    should be either one or two words (separated by a space). Sometimes,\r\n    however, you may need to be more descriptive. For example, if you see\r\n    \"scorch marks\" and want to look at them, you would have to type \"look scorch\r\n    marks\" since typing \"look marks\" or \"look scorch\" doesn't really convey what\r\n    you want to do.\r\n  </p>\r\n  <p>\r\n    The game will display the 30 most recent messages. You can scroll to review\r\n    old message if you think it would help. If it ever gets unbearable and you\r\n    want a blank slate, you can use the \"clear\" (cl) command to clear out all\r\n    messages. Afterward, you should \"look\" again or else you're just looking at\r\n    a blank screen.\r\n  </p>\r\n  <p>\r\n    Pressing up lets you cycle through your most-recently entered 10 commands.\r\n    You can also press down to cycle the other way.\r\n  </p>\r\n  <h4>Interacting With Objects</h4>\r\n  <p>\r\n    You will need to often interact with objects in the environment and items in\r\n    your inventory. To do so, you can most of the time do what makes sense. If\r\n    you see a button, you can probably \"push button\". However, sometimes\r\n    interacting with something doesn't really have a single verb that makes\r\n    sense. For example, what verb would you use to interact with a computer?\r\n    \"type computer\"? \"type keyboard\"? \"push keys\"? None of these really convey\r\n    using a computer. In these cases, you can simply type \"use [target]\".\r\n  </p>\r\n  <p>\r\n    Sometimes, interacting with something requires more than just using it. You\r\n    may need to use another item on the thing you want to interact with. For\r\n    example, if you want to unlock a locked door and you have a key, you may\r\n    need to type \"use key on door\". You can try using anything on anything else\r\n    just to see if it works. If it doesn't work, you won't lose your item.\r\n  </p>\r\n  <h4>Navigating the World</h4>\r\n  <p>\r\n    You can move between areas by using the commands \"north\" (n), \"south\" (s),\r\n    \"east\" (e), \"west\" (w), \"up\" (u), and \"down\" (d). Area descriptions will\r\n    tell you the directions you're able to move (e.g. \"a path leads north\").\r\n  </p>\r\n  <p>\r\n    If you have a hard time keeping track of where you are or the layout of the\r\n    game world, you could always have a piece of paper and jot down the names of\r\n    the areas with lines connecting them. Oldschool!\r\n  </p>\r\n  <p>\r\n    <a href={window.hostDir + \"/adventure-blank-map.pdf\"} target=\"_blank\">\r\n      Click here to download a blank map to get you started!\r\n    </a>\r\n  </p>\r\n  <h4>Items and Inventory</h4>\r\n  <p>\r\n    When you acquire things in the game, usually by using \"take [target]\", they\r\n    are added to your inventory. You can carry a LOT of stuff. You can check\r\n    what you're carrying by typing the \"inventory\" (or \"i\") command! You can\r\n    look at things in your inventory too! In fact, you can do all sorts of\r\n    things to the stuff in your inventory.\r\n  </p>\r\n  <h4>Meeting and Greeting</h4>\r\n  <p>\r\n    Sometimes you may meet characters in the game world. Characters have a few\r\n    special interactions that objects in the world don't have. The first of\r\n    which is the ability to greet them. You can greet a character by typing\r\n    \"greet [target]\".\r\n  </p>\r\n  <p>\r\n    Some characters will even let you ask them about things. You can ask\r\n    questions by typing \"ask [target] about [topic]\". If the topic is something\r\n    they'd know about, they'll respond. Feel free to ask about all kinds of\r\n    stuff!\r\n  </p>\r\n  <p>\r\n    You can also give things to characters. You can give an item to someone by\r\n    typing \"give [item] to [target]\". If it's something that the character\r\n    wants, they're respond.\r\n  </p>\r\n  <h4>Advice</h4>\r\n  <p>\r\n    You should probably \"look\" at things a lot. Who know's what might be useful\r\n    or hiding something else? And death lurks around every corner. You can also\r\n    look at the area you're in by typing just \"look\" without a target.\r\n  </p>\r\n  <p>\r\n    Most of the time you won't learn about everything that's in an area just by\r\n    entering it and looking at the area overall. As you look at specific things\r\n    in the world you may learn about things you hadn't noticed before. For\r\n    example, when you enter some area it might tell you that there's a box. If\r\n    you tried to \"look box\" you might learn that there's an item in the box.\r\n    After you learn that there's an item in the box, you could look or take that\r\n    item!\r\n  </p>\r\n  <p>\r\n    Throughout the game world you may come across cairns. In the game world,\r\n    these are small stacks of stones measuring only 2-3 feet tall that are\r\n    imbued with some sort of supernatural power to aid travelers and explorers.\r\n    When you find one in the world, you should \"touch\" it. When you touch one,\r\n    you attune your soul to the cairn. If your adventure is cut short by\r\n    tragedy, you can restart from the last cairn you touched.\r\n  </p>\r\n  <p>\r\n    If you need more help, you can view the\r\n    <a href=\"walkthrough\" target=\"_blank\">Spoiler-riffic Walkthrough.</a>\r\n  </p>\r\n  {#if allowTogglingHints}\r\n    <h4>Hints / Enable Clicking</h4>\r\n    <p>\r\n      If you'd like, you can enable the experimental \"hint\" feature. This will\r\n      cause interactable things to be marked with a dashed underline. They will\r\n      then be interactable via clicking.\r\n    </p>\r\n    <p>\r\n      Hints are currently {onOrOff}. After toggling hints on or off, hints will\r\n      begin appearing the next time text is written on the screen.\r\n    </p>\r\n    <p>\r\n      <button\r\n        on:click={() => {\r\n          dispatch(\"toggleHints\");\r\n          showHints = !showHints;\r\n        }}\r\n      >\r\n        Turn Hints {opposite}\r\n      </button>\r\n    </p>\r\n  {/if}\r\n</room>\r\n\r\n<style>\r\n  p {\r\n    margin: initial 1em;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  export let coords = \"\";\r\n  export let hasCompass = false;\r\n  export let isDark = false;\r\n  export let isLightOn = false;\r\n  export let exits = [];\r\n\r\n  $: coordsNum = coords ? coords.split(\" \")[1] : undefined;\r\n  $: coordsXY =\r\n    coordsNum && coordsNum !== \"???\"\r\n      ? [coordsNum[0], Number(coordsNum[1])]\r\n      : undefined;\r\n\r\n  const letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\r\n  const rows = [0, 1, 2, 3, 4, 5, 6];\r\n</script>\r\n\r\n<style>\r\n  .location {\r\n    z-index: 1;\r\n    position: relative;\r\n    box-shadow: 0 0 10em #222;\r\n    background-color: #222;\r\n    padding: 1em;\r\n    flex: none;\r\n    overflow: auto;\r\n    align-self: flex-start;\r\n    font-size: 0.85em;\r\n    width: 270px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1em;\r\n    align-items: center;\r\n  }\r\n\r\n  h4 {\r\n    margin: 0;\r\n  }\r\n\r\n  .room {\r\n    width: 5em;\r\n    height: 5em;\r\n    border: 1px gray solid;\r\n    margin: 1em;\r\n    position: relative;\r\n  }\r\n\r\n  .exit {\r\n    position: absolute;\r\n    width: 1em;\r\n    height: 1em;\r\n  }\r\n\r\n  .north {\r\n    top: -1.25em;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n  }\r\n\r\n  .north::after {\r\n    content: \"ü°Ö\";\r\n  }\r\n\r\n  .south {\r\n    bottom: -1.25em;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n  }\r\n\r\n  .south::after {\r\n    content: \"ü°á\";\r\n  }\r\n\r\n  .east {\r\n    right: -1.25em;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n\r\n  .east::after {\r\n    content: \"ü°Ü\";\r\n  }\r\n\r\n  .west {\r\n    left: -1.25em;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n\r\n  .west::after {\r\n    content: \"ü°Ñ\";\r\n  }\r\n\r\n  .up {\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-100%, -50%);\r\n  }\r\n\r\n  .up::after {\r\n    content: \"ü†ï\";\r\n  }\r\n\r\n  .down {\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(100%, -50%);\r\n  }\r\n\r\n  .down::after {\r\n    content: \"ü†ó\";\r\n  }\r\n\r\n  table {\r\n    border-spacing: 2px;\r\n    margin: 0;\r\n  }\r\n\r\n  td {\r\n    background-color: rgb(87, 87, 87);\r\n    width: 0.5em;\r\n    height: 0.5em;\r\n  }\r\n\r\n  td.active {\r\n    background-color: white;\r\n  }\r\n</style>\r\n\r\n{#if coords}\r\n  <div class=\"location\">\r\n    {#if isDark && !isLightOn}\r\n      A Dark and Terrible Place...\r\n    {:else}\r\n      {#if hasCompass}\r\n        <h4>{coords}</h4>\r\n      {:else}\r\n        <h4>{coords.substring(0, coords.indexOf(' '))}</h4>\r\n      {/if}\r\n      <div class=\"room\">\r\n        {#each exits as exit}\r\n          <div class=\"exit {exit}\" />\r\n        {/each}\r\n      </div>\r\n    {/if}\r\n\r\n    {#if coordsXY && hasCompass}\r\n      <table class=\"map\">\r\n        {#each rows as num}\r\n          <tr>\r\n            {#each letters as letter}\r\n              <td\r\n                class={coordsXY[0] === letter && coordsXY[1] - 1 === num ? 'active' : ''} />\r\n            {/each}\r\n          </tr>\r\n        {/each}\r\n      </table>\r\n    {/if}\r\n  </div>\r\n{/if}\r\n"
  ],
  "names": [],
  "mappings": "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"
}